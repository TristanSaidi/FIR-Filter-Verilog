/*
 *      CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
 *      
 *      Copyright (c) 1993-2021  ARM Physical IP, Inc.  All  Rights Reserved.
 *      
 *      Use of this Software is subject to the terms and conditions  of the
 *      applicable license agreement with ARM Physical IP, Inc.  In addition,
 *      this Software is protected by patents, copyright law and international
 *      treaties.
 *      
 *      The copyright notice(s) in this Software does not indicate actual or
 *      intended publication of this Software.
 *      
 *      name:			High Speed/Density Single Port Register File Generator
 *           			IBM CMRF8SF-LPVT Process
 *      version:		2008Q3V1
 *      comment:		
 *      configuration:	 -instname sram256w20b -words 256 -bits 20 -frequency 1 -ring_width 2.0 -mux 2 -write_mask off -wp_size 8 -top_layer "m6-m8_m4" -power_type rings -horiz met3 -vert met2 -cust_comment "" -bus_notation on -left_bus_delim "[" -right_bus_delim "]" -pwr_gnd_rename "VDD:VDD,GND:VSS" -prefix "" -pin_space 0.0 -name_case upper -check_instname on -diodes on -inside_ring_type GND -drive 4 -asvm on -libname USERLIB -corners ff_1p65v_0c,ff_1p65v_0c,tt_1p2v_25c,ss_1p08v_m55c
 *
 *      Synopsys model for Synchronous Single-Port Register File
 *
 *      Library Name:   USERLIB
 *      Instance Name:  sram256w20b
 *      Words:          256
 *      Word Width:     20
 *      Mux:            2
 *      Corner:        tt_1p2v_25c
 *
 *      Creation Date:  2021-11-20 03:16:55Z
 *      Version:        2008Q3V1
 *
 *      Verified With: Synopsys Design Compiler
 *
 *      Modeling Assumptions: This library contains a black box description
 *          for a memory element.  At the library level, a
 *          default_max_transition constraint is set to the maximum
 *          characterized input slew.  Each output has a max_capacitance
 *          constraint set to the highest characterized output load.  These two
 *          constraints force Design Compiler to synthesize circuits that
 *          operate within the characterization space.  The user can tighten
 *          these constraints, if desired.  When writing SDF from Design
 *          Compiler, use the version 2.1 option.  This ensures the SDF will
 *          annotate to simulation models provided with this generator.
 *
 *      Modeling Limitations: 
 *          Due to limitations of the .lib format, some data reduction was
 *          necessary.  When reducing data, minimum values were chosen for the
 *          fast case corner and maximum values were used for the typical and
 *          best case corners.  It is recommended that critical timing and
 *          setup and hold times be checked at all corners.
 *
 *      Known Bugs: None.
 *
 *      Known Work Arounds: N/A
 *
 */

library(USERLIB) {
	delay_model		: table_lookup;
	revision		: 1.1;	
	date			: "2021-11-20 03:16:55Z";
	comment			: "Confidential Information of ARM Physical IP, Inc.  Use subject to ARM Physical IP, Inc. license.  Copyright (c) 1993-2021 ARM Physical IP, Inc.";
	time_unit		: "1ns";
	voltage_unit		: "1V";
	current_unit		: "1mA";
	leakage_power_unit	: "1mW";
	nom_process		: 1;
	nom_temperature		: 25.000;
	nom_voltage		: 1.200;
	capacitive_load_unit	 (1,pf);

	pulling_resistance_unit	        : "1kohm";

	/* additional header data */
	default_cell_leakage_power      : 0;
	default_fanout_load		: 1;
	default_inout_pin_cap		: 0.005;
	default_input_pin_cap		: 0.005;
	default_output_pin_cap		: 0.0;
	default_max_transition		: 1.500;

        /* default attributes */
        default_leakage_power_density : 0.0;
        slew_derate_from_library      : 1.000;
        slew_lower_threshold_pct_fall : 10.000;
        slew_upper_threshold_pct_fall : 90.000;
        slew_lower_threshold_pct_rise : 10.000;
        slew_upper_threshold_pct_rise : 90.000;
        input_threshold_pct_fall      : 50.000;
        input_threshold_pct_rise      : 50.000;
        output_threshold_pct_fall     : 50.000;
        output_threshold_pct_rise     : 50.000;

 	/* k-factors */
 	k_process_cell_fall             : 1;
 	k_process_cell_leakage_power    : 0;
 	k_process_cell_rise             : 1;
 	k_process_fall_transition       : 1;
 	k_process_hold_fall             : 1;
 	k_process_hold_rise             : 1;
 	k_process_internal_power        : 0;
 	k_process_min_pulse_width_high  : 1;
 	k_process_min_pulse_width_low   : 1;
 	k_process_pin_cap               : 0;
 	k_process_recovery_fall         : 1;
 	k_process_recovery_rise         : 1;
 	k_process_rise_transition       : 1;
 	k_process_setup_fall            : 1;
 	k_process_setup_rise            : 1;
 	k_process_wire_cap              : 0;
 	k_process_wire_res              : 0;
	k_temp_cell_fall		: 0.000;
	k_temp_cell_rise		: 0.000;
	k_temp_hold_fall                : 0.000;
	k_temp_hold_rise                : 0.000;
	k_temp_min_pulse_width_high     : 0.000;
	k_temp_min_pulse_width_low      : 0.000;
	k_temp_min_period               : 0.000;
	k_temp_rise_propagation         : 0.000;
	k_temp_fall_propagation         : 0.000;
	k_temp_rise_transition          : 0.0;
	k_temp_fall_transition          : 0.0;
	k_temp_recovery_fall            : 0.000;
	k_temp_recovery_rise            : 0.000;
	k_temp_setup_fall               : 0.000;
	k_temp_setup_rise               : 0.000;
	k_volt_cell_fall                : 0.000;
	k_volt_cell_rise                : 0.000;
	k_volt_hold_fall                : 0.000;
	k_volt_hold_rise                : 0.000;
	k_volt_min_pulse_width_high     : 0.000;
	k_volt_min_pulse_width_low      : 0.000;
	k_volt_min_period               : 0.000;
	k_volt_rise_propagation         : 0.000;
	k_volt_fall_propagation         : 0.000;
	k_volt_rise_transition	        : 0.0;
	k_volt_fall_transition	        : 0.0;
	k_volt_recovery_fall            : 0.000;
	k_volt_recovery_rise            : 0.000;
	k_volt_setup_fall               : 0.000;
	k_volt_setup_rise               : 0.000;


        operating_conditions(tt_1p2v_25c) {
		process	 : 1;
		temperature	 : 25.000;
		voltage	 : 1.200;
		tree_type	 : balanced_tree;
	}
        default_operating_conditions : tt_1p2v_25c;
	wire_load("sample") {
		resistance	 : 1.6e-05;
		capacitance	 : 0.0002;
		area	 : 1.7;
  		slope	 : 500;
		fanout_length	 (1,500);
	}
        lu_table_template(sram256w20b_bist_mux_delay_template) {
           variable_1 : input_net_transition;
           variable_2 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        lu_table_template(sram256w20b_mux_mem_out_delay_template) {
           variable_1 : input_net_transition;
           variable_2 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        lu_table_template(sram256w20b_mem_out_delay_template) {
           variable_1 : input_net_transition;
           variable_2 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
	lu_table_template(sram256w20b_bist_mux_slew_template) {
           variable_1 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
	lu_table_template(sram256w20b_mem_out_slew_template) {
           variable_1 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
	lu_table_template(sram256w20b_clk_setup_constraint_template) {
           variable_1 : related_pin_transition;
           variable_2 : constrained_pin_transition;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
	lu_table_template(sram256w20b_constraint_template) {
           variable_1 : related_pin_transition;
           variable_2 : constrained_pin_transition;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        power_lut_template(sram256w20b_energy_template_clkslew_load) {
           variable_1 : input_transition_time;
           variable_2 : total_output_net_capacitance;
               index_1 ("1000, 1001");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        power_lut_template(sram256w20b_energy_template_sigslew_load) {
           variable_1 : input_transition_time;
           variable_2 : total_output_net_capacitance;
               index_1 ("1000, 1001");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        power_lut_template(sram256w20b_energy_template_load) {
           variable_1 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        power_lut_template(sram256w20b_energy_template_clkslew) {
           variable_1 : input_transition_time;
               index_1 ("1000, 1001");
        }
        power_lut_template(sram256w20b_energy_template_sigslew) {
           variable_1 : input_transition_time;
               index_1 ("1000, 1001");
        }
	library_features(report_delay_calculation);
	type (sram256w20b_DATA) {
		base_type : array ;
		data_type : bit ;
		bit_width : 20;
		bit_from : 19;
		bit_to : 0 ;
		downto : true ;
	}
	type (sram256w20b_UPM) {
		base_type : array ;
		data_type : bit ;
		bit_width : 3;
		bit_from : 2;
		bit_to : 0 ;
		downto : true ;
	}
	type (sram256w20b_ADDRESS) {
		base_type : array ;
		data_type : bit ;
		bit_width : 8;
		bit_from : 7;
		bit_to : 0 ;
		downto : true ;
	}
cell(sram256w20b) {
	area		 : 31681.761;
	dont_use	 : TRUE;
	dont_touch	 : TRUE;
        interface_timing : TRUE;
	memory() {
		type : ram;
		address_width : 8;
		word_width : 20;
	}
        bus(Q)   {
                bus_type : sram256w20b_DATA;
		direction : output;
		max_capacitance : 0.650;
                memory_read() {
			address : A;
		}
                timing() {
                        related_pin :   "CLK" ;
                        timing_type : rising_edge ;
                        timing_sense : non_unate;
                        cell_rise(sram256w20b_mem_out_delay_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.000, 0.020, 0.040, 0.090, 0.220, 0.430, 0.650");
                        values ( \
                          "1.925, 1.946, 1.968, 2.023, 2.164, 2.393, 2.633", \
                          "1.957, 1.978, 2.000, 2.055, 2.196, 2.425, 2.665", \
                          "1.997, 2.019, 2.040, 2.095, 2.236, 2.465, 2.705", \
                          "2.077, 2.099, 2.121, 2.175, 2.317, 2.546, 2.785", \
                          "2.318, 2.340, 2.362, 2.416, 2.558, 2.786, 3.026", \
                          "2.719, 2.741, 2.763, 2.817, 2.959, 3.188, 3.428", \
                          "3.121, 3.143, 3.164, 3.219, 3.361, 3.589, 3.829" \
                        )
                        }
                        rise_transition(sram256w20b_mem_out_slew_template) {
                        index_1 ("0.000, 0.020, 0.040, 0.090, 0.220, 0.430, 0.650");
                        values ("0.050, 0.102, 0.155, 0.285, 0.623, 1.170, 1.743")
                        }
                        cell_fall(sram256w20b_mem_out_delay_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.000, 0.020, 0.040, 0.090, 0.220, 0.430, 0.650");
                        values ( \
                          "1.925, 1.946, 1.968, 2.023, 2.164, 2.393, 2.633", \
                          "1.957, 1.978, 2.000, 2.055, 2.196, 2.425, 2.665", \
                          "1.997, 2.019, 2.040, 2.095, 2.236, 2.465, 2.705", \
                          "2.077, 2.099, 2.121, 2.175, 2.317, 2.546, 2.785", \
                          "2.318, 2.340, 2.362, 2.416, 2.558, 2.786, 3.026", \
                          "2.719, 2.741, 2.763, 2.817, 2.959, 3.188, 3.428", \
                          "3.121, 3.143, 3.164, 3.219, 3.361, 3.589, 3.829" \
                        )
                        }
                        fall_transition(sram256w20b_mem_out_slew_template) {
                        index_1 ("0.000, 0.020, 0.040, 0.090, 0.220, 0.430, 0.650");
                        values ("0.055, 0.118, 0.181, 0.339, 0.749, 1.412, 2.107")
                        }
                }
        }
        pin(CLK)   {
		direction : input;
		capacitance : 0.057;
                clock : true;
                max_transition : 1.500;
                min_pulse_width_high : 0.355 ;
                min_pulse_width_low  : 0.585 ;
                min_period           : 3.984 ;


                internal_power(){
                        when : "(!CEN & ! \
                                 (WEN) \
                                ) \
                                 ";
                        rise_power(sram256w20b_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("17.194, 17.194")
                        }
                        fall_power(sram256w20b_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.000, 0.000")
                        }
                }
                internal_power(){
                        when : "(!CEN & \
                                 (WEN) \
                                ) \
                                 ";
                        rise_power(sram256w20b_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("15.611, 15.611")
                        }
                        fall_power(sram256w20b_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.000, 0.000")
                        }
                }
         internal_power(){
                 when : "(CEN)";
                        rise_power(sram256w20b_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.061, 0.061")
                        }
                        fall_power(sram256w20b_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.000, 0.000")
                        }
                }
        }

        pin(CEN)   {
                direction : input;
                capacitance : 0.008;
                timing() {
                        related_pin     : CLK;
                        timing_type     : setup_rising ;
                        rise_constraint(sram256w20b_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.560, 0.590, 0.629, 0.706, 0.936, 1.321, 1.705", \
                          "0.528, 0.558, 0.597, 0.674, 0.904, 1.289, 1.673", \
                          "0.487, 0.518, 0.557, 0.634, 0.864, 1.248, 1.633", \
                          "0.407, 0.438, 0.476, 0.553, 0.784, 1.168, 1.553", \
                          "0.166, 0.197, 0.235, 0.312, 0.543, 0.927, 1.312", \
                          "-0.235, -0.204, -0.166, -0.089, 0.142, 0.526, 0.910", \
                          "-0.637, -0.606, -0.567, -0.491, -0.260, 0.124, 0.509" \
                        )
                        }
                        fall_constraint(sram256w20b_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.642, 0.675, 0.717, 0.799, 1.048, 1.461, 1.875", \
                          "0.610, 0.643, 0.685, 0.767, 1.015, 1.429, 1.842", \
                          "0.570, 0.603, 0.645, 0.727, 0.975, 1.389, 1.802", \
                          "0.490, 0.523, 0.564, 0.647, 0.895, 1.309, 1.722", \
                          "0.249, 0.282, 0.323, 0.406, 0.654, 1.068, 1.481", \
                          "-0.153, -0.119, -0.078, 0.005, 0.253, 0.666, 1.080", \
                          "-0.554, -0.521, -0.480, -0.397, -0.149, 0.265, 0.678" \
                        )
                        }
                } 
                timing() {
                        related_pin     : CLK;
                        timing_type     : hold_rising ;
                        rise_constraint(sram256w20b_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.058, 0.028, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.460, 0.429, 0.391, 0.314, 0.083, 0.000, 0.000", \
                          "0.861, 0.830, 0.792, 0.715, 0.485, 0.100, 0.000" \
                        )
                        }
                        fall_constraint(sram256w20b_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.370, 0.337, 0.295, 0.213, 0.000, 0.000, 0.000", \
                          "0.771, 0.738, 0.697, 0.614, 0.366, 0.000, 0.000" \
                        )
                        }
               }
        }
        pin(WEN){
                direction : input;
                capacitance : 0.018;
                timing() {
                        related_pin     : CLK;
                        timing_type     : setup_rising ;
                        rise_constraint(sram256w20b_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.391, 0.424, 0.464, 0.546, 0.791, 1.198, 1.606", \
                          "0.359, 0.391, 0.432, 0.514, 0.758, 1.166, 1.574", \
                          "0.319, 0.351, 0.392, 0.474, 0.718, 1.126, 1.534", \
                          "0.238, 0.271, 0.312, 0.393, 0.638, 1.046, 1.454", \
                          "-0.002, 0.030, 0.071, 0.152, 0.397, 0.805, 1.213", \
                          "-0.404, -0.371, -0.331, -0.249, -0.004, 0.404, 0.811", \
                          "-0.805, -0.773, -0.732, -0.650, -0.406, 0.002, 0.410" \
                        )
                        }
                        fall_constraint(sram256w20b_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.513, 0.541, 0.576, 0.646, 0.856, 1.206, 1.556", \
                          "0.481, 0.509, 0.544, 0.614, 0.824, 1.174, 1.524", \
                          "0.441, 0.469, 0.504, 0.574, 0.784, 1.134, 1.484", \
                          "0.361, 0.389, 0.424, 0.494, 0.704, 1.053, 1.403", \
                          "0.120, 0.148, 0.183, 0.253, 0.463, 0.813, 1.162", \
                          "-0.281, -0.253, -0.218, -0.148, 0.061, 0.411, 0.761", \
                          "-0.683, -0.655, -0.620, -0.550, -0.340, 0.010, 0.359" \
                        )
                        }
                } 
                timing() {
                        related_pin     : CLK;
                        timing_type     : hold_rising ;
                        rise_constraint(sram256w20b_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.031, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.111, 0.079, 0.038, 0.000, 0.000, 0.000, 0.000", \
                          "0.352, 0.320, 0.279, 0.197, 0.000, 0.000, 0.000", \
                          "0.754, 0.721, 0.680, 0.599, 0.354, 0.000, 0.000", \
                          "1.155, 1.122, 1.082, 1.000, 0.755, 0.348, 0.000" \
                        )
                        }
                        fall_constraint(sram256w20b_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.002, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.042, 0.014, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.123, 0.095, 0.060, 0.000, 0.000, 0.000, 0.000", \
                          "0.364, 0.336, 0.301, 0.231, 0.021, 0.000, 0.000", \
                          "0.765, 0.737, 0.702, 0.632, 0.422, 0.072, 0.000", \
                          "1.166, 1.138, 1.103, 1.034, 0.824, 0.474, 0.124" \
                        )
                        }
               }
        }
        bus(A)   {
                bus_type : sram256w20b_ADDRESS;
                direction : input;
                capacitance : 0.013;
                timing() {
                        related_pin     : CLK;
                        timing_type     : setup_rising ;
                        rise_constraint(sram256w20b_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.801, 0.836, 0.880, 0.968, 1.232, 1.671, 2.110", \
                          "0.769, 0.804, 0.848, 0.936, 1.200, 1.639, 2.078", \
                          "0.729, 0.764, 0.808, 0.896, 1.159, 1.599, 2.038", \
                          "0.649, 0.684, 0.728, 0.816, 1.079, 1.519, 1.958", \
                          "0.408, 0.443, 0.487, 0.575, 0.838, 1.278, 1.717", \
                          "0.006, 0.041, 0.085, 0.173, 0.437, 0.876, 1.316", \
                          "-0.395, -0.360, -0.316, -0.228, 0.035, 0.475, 0.914" \
                        )
                        }
                        fall_constraint(sram256w20b_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.331, 0.363, 0.404, 0.486, 0.730, 1.138, 1.546", \
                          "0.298, 0.331, 0.372, 0.453, 0.698, 1.106, 1.514", \
                          "0.258, 0.291, 0.332, 0.413, 0.658, 1.066, 1.474", \
                          "0.178, 0.211, 0.251, 0.333, 0.578, 0.985, 1.393", \
                          "-0.063, -0.030, 0.011, 0.092, 0.337, 0.745, 1.152", \
                          "-0.464, -0.432, -0.391, -0.309, -0.065, 0.343, 0.751", \
                          "-0.866, -0.833, -0.792, -0.711, -0.466, -0.058, 0.350" \
                        )
                        }
                } 
                timing() {
                        related_pin     : CLK;
                        timing_type     : hold_rising ;
                        rise_constraint(sram256w20b_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.028, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.068, 0.033, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.149, 0.113, 0.070, 0.000, 0.000, 0.000, 0.000", \
                          "0.389, 0.354, 0.310, 0.223, 0.000, 0.000, 0.000", \
                          "0.791, 0.756, 0.712, 0.624, 0.360, 0.000, 0.000", \
                          "1.192, 1.157, 1.113, 1.025, 0.762, 0.322, 0.000" \
                        )
                        }
                        fall_constraint(sram256w20b_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.029, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.062, 0.029, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.102, 0.069, 0.028, 0.000, 0.000, 0.000, 0.000", \
                          "0.182, 0.149, 0.109, 0.027, 0.000, 0.000, 0.000", \
                          "0.423, 0.390, 0.349, 0.268, 0.023, 0.000, 0.000", \
                          "0.824, 0.792, 0.751, 0.669, 0.425, 0.017, 0.000", \
                          "1.226, 1.193, 1.152, 1.071, 0.826, 0.418, 0.010" \
                        )
                        }
               }
                internal_power(){
                        when : "CEN";
                        rise_power(sram256w20b_energy_template_sigslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.140, 0.140")
                        }
                        fall_power(sram256w20b_energy_template_sigslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.140, 0.140")
                        }
                }
        }
        bus(D)   {
                bus_type : sram256w20b_DATA;
                memory_write() {
                        address : A;
                        clocked_on : "CLK";
                }
                direction : input;
                capacitance : 0.003;
                timing() {
                        related_pin     : CLK;
                        timing_type     : setup_rising ;
                        rise_constraint(sram256w20b_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.223, 0.257, 0.298, 0.381, 0.630, 1.045, 1.461", \
                          "0.191, 0.224, 0.266, 0.349, 0.598, 1.013, 1.429", \
                          "0.151, 0.184, 0.226, 0.309, 0.558, 0.973, 1.388", \
                          "0.071, 0.104, 0.145, 0.229, 0.478, 0.893, 1.308", \
                          "-0.170, -0.137, -0.095, -0.012, 0.237, 0.652, 1.067", \
                          "-0.572, -0.538, -0.497, -0.414, -0.165, 0.251, 0.666", \
                          "-0.973, -0.940, -0.898, -0.815, -0.566, -0.151, 0.264" \
                        )
                        }
                        fall_constraint(sram256w20b_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.354, 0.386, 0.427, 0.508, 0.752, 1.159, 1.566", \
                          "0.322, 0.354, 0.395, 0.476, 0.720, 1.127, 1.534", \
                          "0.282, 0.314, 0.355, 0.436, 0.680, 1.087, 1.493", \
                          "0.201, 0.234, 0.275, 0.356, 0.600, 1.007, 1.413", \
                          "-0.040, -0.007, 0.034, 0.115, 0.359, 0.766, 1.172", \
                          "-0.441, -0.408, -0.368, -0.286, -0.042, 0.364, 0.771", \
                          "-0.842, -0.810, -0.769, -0.688, -0.444, -0.037, 0.369" \
                        )
                        }
                } 
                timing() {
                        related_pin     : CLK;
                        timing_type     : hold_rising ;
                        rise_constraint(sram256w20b_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.014, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.046, 0.013, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.087, 0.053, 0.012, 0.000, 0.000, 0.000, 0.000", \
                          "0.167, 0.134, 0.092, 0.009, 0.000, 0.000, 0.000", \
                          "0.408, 0.374, 0.333, 0.250, 0.001, 0.000, 0.000", \
                          "0.809, 0.776, 0.734, 0.651, 0.402, 0.000, 0.000", \
                          "1.211, 1.177, 1.136, 1.053, 0.804, 0.388, 0.000" \
                        )
                        }
                        fall_constraint(sram256w20b_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.238, 0.205, 0.165, 0.083, 0.000, 0.000, 0.000", \
                          "0.639, 0.607, 0.566, 0.485, 0.241, 0.000, 0.000", \
                          "1.041, 1.008, 0.967, 0.886, 0.642, 0.235, 0.000" \
                        )
                        }
               }
        }

        cell_leakage_power : 9.13E-5;
}
}
