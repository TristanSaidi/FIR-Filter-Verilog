/*
 *      CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
 *      
 *      Copyright (c) 1993-2021  ARM Physical IP, Inc.  All  Rights Reserved.
 *      
 *      Use of this Software is subject to the terms and conditions  of the
 *      applicable license agreement with ARM Physical IP, Inc.  In addition,
 *      this Software is protected by patents, copyright law and international
 *      treaties.
 *      
 *      The copyright notice(s) in this Software does not indicate actual or
 *      intended publication of this Software.
 *      
 *      name:			High Speed/Density Single Port Register File Generator
 *           			IBM CMRF8SF-LPVT Process
 *      version:		2008Q3V1
 *      comment:		
 *      configuration:	 -instname sram256w20b -words 256 -bits 20 -frequency 1 -ring_width 2.0 -mux 2 -write_mask off -wp_size 8 -top_layer "m6-m8_m4" -power_type rings -horiz met3 -vert met2 -cust_comment "" -bus_notation on -left_bus_delim "[" -right_bus_delim "]" -pwr_gnd_rename "VDD:VDD,GND:VSS" -prefix "" -pin_space 0.0 -name_case upper -check_instname on -diodes on -inside_ring_type GND -drive 4 -asvm on -libname USERLIB -corners ff_1p65v_0c,ff_1p65v_0c,tt_1p2v_25c,ss_1p08v_m55c
 *
 *      Synopsys model for Synchronous Single-Port Register File
 *
 *      Library Name:   USERLIB
 *      Instance Name:  sram256w20b
 *      Words:          256
 *      Word Width:     20
 *      Mux:            2
 *      Corner:        ss_1p08v_m55c
 *
 *      Creation Date:  2021-11-20 03:16:55Z
 *      Version:        2008Q3V1
 *
 *      Verified With: Synopsys Design Compiler
 *
 *      Modeling Assumptions: This library contains a black box description
 *          for a memory element.  At the library level, a
 *          default_max_transition constraint is set to the maximum
 *          characterized input slew.  Each output has a max_capacitance
 *          constraint set to the highest characterized output load.  These two
 *          constraints force Design Compiler to synthesize circuits that
 *          operate within the characterization space.  The user can tighten
 *          these constraints, if desired.  When writing SDF from Design
 *          Compiler, use the version 2.1 option.  This ensures the SDF will
 *          annotate to simulation models provided with this generator.
 *
 *      Modeling Limitations: 
 *          Due to limitations of the .lib format, some data reduction was
 *          necessary.  When reducing data, minimum values were chosen for the
 *          fast case corner and maximum values were used for the typical and
 *          best case corners.  It is recommended that critical timing and
 *          setup and hold times be checked at all corners.
 *
 *      Known Bugs: None.
 *
 *      Known Work Arounds: N/A
 *
 */

library(USERLIB) {
	delay_model		: table_lookup;
	revision		: 1.1;	
	date			: "2021-11-20 03:16:55Z";
	comment			: "Confidential Information of ARM Physical IP, Inc.  Use subject to ARM Physical IP, Inc. license.  Copyright (c) 1993-2021 ARM Physical IP, Inc.";
	time_unit		: "1ns";
	voltage_unit		: "1V";
	current_unit		: "1mA";
	leakage_power_unit	: "1mW";
	nom_process		: 1;
	nom_temperature		: -55.000;
	nom_voltage		: 1.080;
	capacitive_load_unit	 (1,pf);

	pulling_resistance_unit	        : "1kohm";

	/* additional header data */
	default_cell_leakage_power      : 0;
	default_fanout_load		: 1;
	default_inout_pin_cap		: 0.005;
	default_input_pin_cap		: 0.005;
	default_output_pin_cap		: 0.0;
	default_max_transition		: 1.500;

        /* default attributes */
        default_leakage_power_density : 0.0;
        slew_derate_from_library      : 1.000;
        slew_lower_threshold_pct_fall : 10.000;
        slew_upper_threshold_pct_fall : 90.000;
        slew_lower_threshold_pct_rise : 10.000;
        slew_upper_threshold_pct_rise : 90.000;
        input_threshold_pct_fall      : 50.000;
        input_threshold_pct_rise      : 50.000;
        output_threshold_pct_fall     : 50.000;
        output_threshold_pct_rise     : 50.000;

 	/* k-factors */
 	k_process_cell_fall             : 1;
 	k_process_cell_leakage_power    : 0;
 	k_process_cell_rise             : 1;
 	k_process_fall_transition       : 1;
 	k_process_hold_fall             : 1;
 	k_process_hold_rise             : 1;
 	k_process_internal_power        : 0;
 	k_process_min_pulse_width_high  : 1;
 	k_process_min_pulse_width_low   : 1;
 	k_process_pin_cap               : 0;
 	k_process_recovery_fall         : 1;
 	k_process_recovery_rise         : 1;
 	k_process_rise_transition       : 1;
 	k_process_setup_fall            : 1;
 	k_process_setup_rise            : 1;
 	k_process_wire_cap              : 0;
 	k_process_wire_res              : 0;
	k_temp_cell_fall		: 0.000;
	k_temp_cell_rise		: 0.000;
	k_temp_hold_fall                : 0.000;
	k_temp_hold_rise                : 0.000;
	k_temp_min_pulse_width_high     : 0.000;
	k_temp_min_pulse_width_low      : 0.000;
	k_temp_min_period               : 0.000;
	k_temp_rise_propagation         : 0.000;
	k_temp_fall_propagation         : 0.000;
	k_temp_rise_transition          : 0.0;
	k_temp_fall_transition          : 0.0;
	k_temp_recovery_fall            : 0.000;
	k_temp_recovery_rise            : 0.000;
	k_temp_setup_fall               : 0.000;
	k_temp_setup_rise               : 0.000;
	k_volt_cell_fall                : 0.000;
	k_volt_cell_rise                : 0.000;
	k_volt_hold_fall                : 0.000;
	k_volt_hold_rise                : 0.000;
	k_volt_min_pulse_width_high     : 0.000;
	k_volt_min_pulse_width_low      : 0.000;
	k_volt_min_period               : 0.000;
	k_volt_rise_propagation         : 0.000;
	k_volt_fall_propagation         : 0.000;
	k_volt_rise_transition	        : 0.0;
	k_volt_fall_transition	        : 0.0;
	k_volt_recovery_fall            : 0.000;
	k_volt_recovery_rise            : 0.000;
	k_volt_setup_fall               : 0.000;
	k_volt_setup_rise               : 0.000;


        operating_conditions(ss_1p08v_m55c) {
		process	 : 1;
		temperature	 : -55.000;
		voltage	 : 1.080;
		tree_type	 : balanced_tree;
	}
        default_operating_conditions : ss_1p08v_m55c;
	wire_load("sample") {
		resistance	 : 1.6e-05;
		capacitance	 : 0.0002;
		area	 : 1.7;
  		slope	 : 500;
		fanout_length	 (1,500);
	}
        lu_table_template(sram256w20b_bist_mux_delay_template) {
           variable_1 : input_net_transition;
           variable_2 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        lu_table_template(sram256w20b_mux_mem_out_delay_template) {
           variable_1 : input_net_transition;
           variable_2 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        lu_table_template(sram256w20b_mem_out_delay_template) {
           variable_1 : input_net_transition;
           variable_2 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
	lu_table_template(sram256w20b_bist_mux_slew_template) {
           variable_1 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
	lu_table_template(sram256w20b_mem_out_slew_template) {
           variable_1 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
	lu_table_template(sram256w20b_clk_setup_constraint_template) {
           variable_1 : related_pin_transition;
           variable_2 : constrained_pin_transition;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
	lu_table_template(sram256w20b_constraint_template) {
           variable_1 : related_pin_transition;
           variable_2 : constrained_pin_transition;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        power_lut_template(sram256w20b_energy_template_clkslew_load) {
           variable_1 : input_transition_time;
           variable_2 : total_output_net_capacitance;
               index_1 ("1000, 1001");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        power_lut_template(sram256w20b_energy_template_sigslew_load) {
           variable_1 : input_transition_time;
           variable_2 : total_output_net_capacitance;
               index_1 ("1000, 1001");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        power_lut_template(sram256w20b_energy_template_load) {
           variable_1 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        power_lut_template(sram256w20b_energy_template_clkslew) {
           variable_1 : input_transition_time;
               index_1 ("1000, 1001");
        }
        power_lut_template(sram256w20b_energy_template_sigslew) {
           variable_1 : input_transition_time;
               index_1 ("1000, 1001");
        }
	library_features(report_delay_calculation);
	type (sram256w20b_DATA) {
		base_type : array ;
		data_type : bit ;
		bit_width : 20;
		bit_from : 19;
		bit_to : 0 ;
		downto : true ;
	}
	type (sram256w20b_UPM) {
		base_type : array ;
		data_type : bit ;
		bit_width : 3;
		bit_from : 2;
		bit_to : 0 ;
		downto : true ;
	}
	type (sram256w20b_ADDRESS) {
		base_type : array ;
		data_type : bit ;
		bit_width : 8;
		bit_from : 7;
		bit_to : 0 ;
		downto : true ;
	}
cell(sram256w20b) {
	area		 : 31681.761;
	dont_use	 : TRUE;
	dont_touch	 : TRUE;
        interface_timing : TRUE;
	memory() {
		type : ram;
		address_width : 8;
		word_width : 20;
	}
        bus(Q)   {
                bus_type : sram256w20b_DATA;
		direction : output;
		max_capacitance : 0.650;
                memory_read() {
			address : A;
		}
                timing() {
                        related_pin :   "CLK" ;
                        timing_type : rising_edge ;
                        timing_sense : non_unate;
                        cell_rise(sram256w20b_mem_out_delay_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.000, 0.020, 0.040, 0.090, 0.220, 0.430, 0.650");
                        values ( \
                          "7.791, 7.841, 7.890, 8.014, 8.336, 8.855, 9.399", \
                          "7.829, 7.878, 7.928, 8.052, 8.373, 8.893, 9.437", \
                          "7.876, 7.925, 7.975, 8.099, 8.420, 8.940, 9.484", \
                          "7.970, 8.019, 8.069, 8.193, 8.514, 9.034, 9.578", \
                          "8.252, 8.301, 8.351, 8.474, 8.796, 9.315, 9.859", \
                          "8.721, 8.771, 8.820, 8.944, 9.266, 9.785, 10.329", \
                          "9.191, 9.241, 9.290, 9.414, 9.735, 10.255, 10.799" \
                        )
                        }
                        rise_transition(sram256w20b_mem_out_slew_template) {
                        index_1 ("0.000, 0.020, 0.040, 0.090, 0.220, 0.430, 0.650");
                        values ("0.127, 0.237, 0.348, 0.625, 1.345, 2.507, 3.725")
                        }
                        cell_fall(sram256w20b_mem_out_delay_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.000, 0.020, 0.040, 0.090, 0.220, 0.430, 0.650");
                        values ( \
                          "8.015, 8.082, 8.148, 8.315, 8.748, 9.448, 10.180", \
                          "8.053, 8.119, 8.186, 8.352, 8.786, 9.485, 10.218", \
                          "8.100, 8.166, 8.233, 8.399, 8.832, 9.532, 10.265", \
                          "8.194, 8.260, 8.327, 8.493, 8.926, 9.626, 10.359", \
                          "8.475, 8.542, 8.609, 8.775, 9.208, 9.908, 10.641", \
                          "8.945, 9.012, 9.078, 9.245, 9.678, 10.378, 11.110", \
                          "9.415, 9.481, 9.548, 9.715, 10.148, 10.847, 11.580" \
                        )
                        }
                        fall_transition(sram256w20b_mem_out_slew_template) {
                        index_1 ("0.000, 0.020, 0.040, 0.090, 0.220, 0.430, 0.650");
                        values ("0.140, 0.295, 0.451, 0.840, 1.850, 3.482, 5.193")
                        }
                }
        }
        pin(CLK)   {
		direction : input;
		capacitance : 0.058;
                clock : true;
                max_transition : 1.500;
                min_pulse_width_high : 0.712 ;
                min_pulse_width_low  : 1.654 ;
                min_period           : 9.793 ;


                internal_power(){
                        when : "(!CEN & ! \
                                 (WEN) \
                                ) \
                                 ";
                        rise_power(sram256w20b_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("13.647, 13.647")
                        }
                        fall_power(sram256w20b_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.000, 0.000")
                        }
                }
                internal_power(){
                        when : "(!CEN & \
                                 (WEN) \
                                ) \
                                 ";
                        rise_power(sram256w20b_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("12.344, 12.344")
                        }
                        fall_power(sram256w20b_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.000, 0.000")
                        }
                }
         internal_power(){
                 when : "(CEN)";
                        rise_power(sram256w20b_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.050, 0.050")
                        }
                        fall_power(sram256w20b_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.000, 0.000")
                        }
                }
        }

        pin(CEN)   {
                direction : input;
                capacitance : 0.008;
                timing() {
                        related_pin     : CLK;
                        timing_type     : setup_rising ;
                        rise_constraint(sram256w20b_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "1.238, 1.277, 1.325, 1.421, 1.710, 2.192, 2.674", \
                          "1.200, 1.239, 1.287, 1.384, 1.673, 2.155, 2.637", \
                          "1.153, 1.192, 1.240, 1.337, 1.626, 2.108, 2.590", \
                          "1.060, 1.098, 1.146, 1.243, 1.532, 2.014, 2.496", \
                          "0.778, 0.816, 0.864, 0.961, 1.250, 1.732, 2.214", \
                          "0.308, 0.347, 0.395, 0.491, 0.780, 1.262, 1.744", \
                          "-0.162, -0.123, -0.075, 0.021, 0.311, 0.793, 1.274" \
                        )
                        }
                        fall_constraint(sram256w20b_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "1.872, 1.911, 1.960, 2.057, 2.348, 2.834, 3.320", \
                          "1.835, 1.873, 1.922, 2.019, 2.311, 2.797, 3.283", \
                          "1.788, 1.826, 1.875, 1.972, 2.264, 2.750, 3.236", \
                          "1.694, 1.732, 1.781, 1.878, 2.170, 2.656, 3.142", \
                          "1.412, 1.451, 1.499, 1.596, 1.888, 2.374, 2.860", \
                          "0.942, 0.981, 1.030, 1.127, 1.418, 1.904, 2.390", \
                          "0.472, 0.511, 0.560, 0.657, 0.949, 1.435, 1.920" \
                        )
                        }
                } 
                timing() {
                        related_pin     : CLK;
                        timing_type     : hold_rising ;
                        rise_constraint(sram256w20b_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.337, 0.299, 0.251, 0.154, 0.000, 0.000, 0.000" \
                        )
                        }
                        fall_constraint(sram256w20b_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.350, 0.311, 0.263, 0.166, 0.000, 0.000, 0.000" \
                        )
                        }
               }
        }
        pin(WEN){
                direction : input;
                capacitance : 0.018;
                timing() {
                        related_pin     : CLK;
                        timing_type     : setup_rising ;
                        rise_constraint(sram256w20b_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "1.403, 1.442, 1.491, 1.590, 1.884, 2.375, 2.867", \
                          "1.365, 1.405, 1.454, 1.552, 1.847, 2.338, 2.829", \
                          "1.318, 1.358, 1.407, 1.505, 1.800, 2.291, 2.782", \
                          "1.224, 1.264, 1.313, 1.411, 1.706, 2.197, 2.688", \
                          "0.943, 0.982, 1.031, 1.129, 1.424, 1.915, 2.406", \
                          "0.473, 0.512, 0.561, 0.660, 0.954, 1.445, 1.937", \
                          "0.003, 0.042, 0.092, 0.190, 0.485, 0.976, 1.467" \
                        )
                        }
                        fall_constraint(sram256w20b_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "1.478, 1.514, 1.559, 1.650, 1.921, 2.373, 2.825", \
                          "1.441, 1.477, 1.522, 1.612, 1.883, 2.335, 2.787", \
                          "1.394, 1.430, 1.475, 1.565, 1.836, 2.288, 2.740", \
                          "1.300, 1.336, 1.381, 1.471, 1.742, 2.194, 2.646", \
                          "1.018, 1.054, 1.099, 1.189, 1.461, 1.912, 2.364", \
                          "0.548, 0.584, 0.629, 0.720, 0.991, 1.443, 1.895", \
                          "0.078, 0.115, 0.160, 0.250, 0.521, 0.973, 1.425" \
                        )
                        }
                } 
                timing() {
                        related_pin     : CLK;
                        timing_type     : hold_rising ;
                        rise_constraint(sram256w20b_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.010, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.292, 0.252, 0.203, 0.105, 0.000, 0.000, 0.000", \
                          "0.761, 0.722, 0.673, 0.575, 0.280, 0.000, 0.000", \
                          "1.231, 1.192, 1.143, 1.044, 0.750, 0.258, 0.000" \
                        )
                        }
                        fall_constraint(sram256w20b_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.152, 0.116, 0.071, 0.000, 0.000, 0.000, 0.000", \
                          "0.622, 0.586, 0.541, 0.450, 0.179, 0.000, 0.000", \
                          "1.092, 1.055, 1.010, 0.920, 0.649, 0.197, 0.000" \
                        )
                        }
               }
        }
        bus(A)   {
                bus_type : sram256w20b_ADDRESS;
                direction : input;
                capacitance : 0.013;
                timing() {
                        related_pin     : CLK;
                        timing_type     : setup_rising ;
                        rise_constraint(sram256w20b_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "2.381, 2.420, 2.470, 2.568, 2.865, 3.359, 3.854", \
                          "2.343, 2.383, 2.432, 2.531, 2.827, 3.322, 3.816", \
                          "2.296, 2.336, 2.385, 2.484, 2.780, 3.275, 3.769", \
                          "2.202, 2.242, 2.291, 2.390, 2.687, 3.181, 3.675", \
                          "1.920, 1.960, 2.009, 2.108, 2.405, 2.899, 3.393", \
                          "1.451, 1.490, 1.540, 1.638, 1.935, 2.429, 2.924", \
                          "0.981, 1.020, 1.070, 1.169, 1.465, 1.960, 2.454" \
                        )
                        }
                        fall_constraint(sram256w20b_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.986, 1.025, 1.072, 1.168, 1.454, 1.932, 2.410", \
                          "0.949, 0.987, 1.035, 1.130, 1.417, 1.894, 2.372", \
                          "0.902, 0.940, 0.988, 1.083, 1.370, 1.848, 2.325", \
                          "0.808, 0.846, 0.894, 0.989, 1.276, 1.754, 2.231", \
                          "0.526, 0.564, 0.612, 0.708, 0.994, 1.472, 1.949", \
                          "0.056, 0.095, 0.142, 0.238, 0.525, 1.002, 1.480", \
                          "-0.413, -0.375, -0.327, -0.232, 0.055, 0.532, 1.010" \
                        )
                        }
                } 
                timing() {
                        related_pin     : CLK;
                        timing_type     : hold_rising ;
                        rise_constraint(sram256w20b_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.044, 0.005, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.138, 0.099, 0.049, 0.000, 0.000, 0.000, 0.000", \
                          "0.420, 0.381, 0.331, 0.232, 0.000, 0.000, 0.000", \
                          "0.890, 0.850, 0.801, 0.702, 0.405, 0.000, 0.000", \
                          "1.360, 1.320, 1.271, 1.172, 0.875, 0.381, 0.000" \
                        )
                        }
                        fall_constraint(sram256w20b_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.064, 0.026, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.102, 0.064, 0.016, 0.000, 0.000, 0.000, 0.000", \
                          "0.149, 0.111, 0.063, 0.000, 0.000, 0.000, 0.000", \
                          "0.243, 0.205, 0.157, 0.061, 0.000, 0.000, 0.000", \
                          "0.525, 0.486, 0.439, 0.343, 0.057, 0.000, 0.000", \
                          "0.994, 0.956, 0.908, 0.813, 0.526, 0.049, 0.000", \
                          "1.464, 1.426, 1.378, 1.283, 0.996, 0.518, 0.041" \
                        )
                        }
               }
                internal_power(){
                        when : "CEN";
                        rise_power(sram256w20b_energy_template_sigslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.113, 0.113")
                        }
                        fall_power(sram256w20b_energy_template_sigslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.113, 0.113")
                        }
                }
        }
        bus(D)   {
                bus_type : sram256w20b_DATA;
                memory_write() {
                        address : A;
                        clocked_on : "CLK";
                }
                direction : input;
                capacitance : 0.003;
                timing() {
                        related_pin     : CLK;
                        timing_type     : setup_rising ;
                        rise_constraint(sram256w20b_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "1.131, 1.171, 1.220, 1.319, 1.614, 2.107, 2.599", \
                          "1.094, 1.133, 1.182, 1.281, 1.576, 2.069, 2.562", \
                          "1.047, 1.086, 1.135, 1.234, 1.530, 2.022, 2.515", \
                          "0.953, 0.992, 1.042, 1.140, 1.436, 1.928, 2.421", \
                          "0.671, 0.710, 0.760, 0.858, 1.154, 1.646, 2.139", \
                          "0.201, 0.241, 0.290, 0.389, 0.684, 1.177, 1.669", \
                          "-0.268, -0.229, -0.180, -0.081, 0.214, 0.707, 1.199" \
                        )
                        }
                        fall_constraint(sram256w20b_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "1.244, 1.282, 1.330, 1.426, 1.715, 2.196, 2.676", \
                          "1.206, 1.244, 1.293, 1.389, 1.677, 2.158, 2.639", \
                          "1.159, 1.198, 1.246, 1.342, 1.630, 2.111, 2.592", \
                          "1.065, 1.104, 1.152, 1.248, 1.536, 2.017, 2.498", \
                          "0.783, 0.822, 0.870, 0.966, 1.254, 1.735, 2.216", \
                          "0.314, 0.352, 0.400, 0.496, 0.785, 1.266, 1.746", \
                          "-0.156, -0.118, -0.070, 0.027, 0.315, 0.796, 1.277" \
                        )
                        }
                } 
                timing() {
                        related_pin     : CLK;
                        timing_type     : hold_rising ;
                        rise_constraint(sram256w20b_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.159, 0.120, 0.071, 0.000, 0.000, 0.000, 0.000", \
                          "0.629, 0.589, 0.540, 0.442, 0.146, 0.000, 0.000", \
                          "1.099, 1.059, 1.010, 0.911, 0.616, 0.123, 0.000" \
                        )
                        }
                        fall_constraint(sram256w20b_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.400, 0.361, 0.313, 0.217, 0.000, 0.000, 0.000", \
                          "0.869, 0.831, 0.783, 0.687, 0.398, 0.000, 0.000" \
                        )
                        }
               }
        }

        cell_leakage_power : 4.68E-5;
}
}
