/*
 *      CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
 *      
 *      Copyright (c) 1993-2021  ARM Physical IP, Inc.  All  Rights Reserved.
 *      
 *      Use of this Software is subject to the terms and conditions  of the
 *      applicable license agreement with ARM Physical IP, Inc.  In addition,
 *      this Software is protected by patents, copyright law and international
 *      treaties.
 *      
 *      The copyright notice(s) in this Software does not indicate actual or
 *      intended publication of this Software.
 *      
 *      name:			High Speed/Density Single Port Register File Generator
 *           			IBM CMRF8SF-LPVT Process
 *      version:		2008Q3V1
 *      comment:		
 *      configuration:	 -instname sram256w20b -words 256 -bits 20 -frequency 1 -ring_width 2.0 -mux 2 -write_mask off -wp_size 8 -top_layer "m6-m8_m4" -power_type rings -horiz met3 -vert met2 -cust_comment "" -bus_notation on -left_bus_delim "[" -right_bus_delim "]" -pwr_gnd_rename "VDD:VDD,GND:VSS" -prefix "" -pin_space 0.0 -name_case upper -check_instname on -diodes on -inside_ring_type GND -drive 4 -asvm on -libname USERLIB -corners ff_1p65v_0c,ff_1p65v_0c,tt_1p2v_25c,ss_1p08v_m55c
 *
 *      Synopsys model for Synchronous Single-Port Register File
 *
 *      Library Name:   USERLIB
 *      Instance Name:  sram256w20b
 *      Words:          256
 *      Word Width:     20
 *      Mux:            2
 *      Corner:        ff_1p65v_0c
 *
 *      Creation Date:  2021-11-20 03:16:55Z
 *      Version:        2008Q3V1
 *
 *      Verified With: Synopsys Design Compiler
 *
 *      Modeling Assumptions: This library contains a black box description
 *          for a memory element.  At the library level, a
 *          default_max_transition constraint is set to the maximum
 *          characterized input slew.  Each output has a max_capacitance
 *          constraint set to the highest characterized output load.  These two
 *          constraints force Design Compiler to synthesize circuits that
 *          operate within the characterization space.  The user can tighten
 *          these constraints, if desired.  When writing SDF from Design
 *          Compiler, use the version 2.1 option.  This ensures the SDF will
 *          annotate to simulation models provided with this generator.
 *
 *      Modeling Limitations: 
 *          Due to limitations of the .lib format, some data reduction was
 *          necessary.  When reducing data, minimum values were chosen for the
 *          fast case corner and maximum values were used for the typical and
 *          best case corners.  It is recommended that critical timing and
 *          setup and hold times be checked at all corners.
 *
 *      Known Bugs: None.
 *
 *      Known Work Arounds: N/A
 *
 */

library(USERLIB) {
	delay_model		: table_lookup;
	revision		: 1.1;	
	date			: "2021-11-20 03:16:55Z";
	comment			: "Confidential Information of ARM Physical IP, Inc.  Use subject to ARM Physical IP, Inc. license.  Copyright (c) 1993-2021 ARM Physical IP, Inc.";
	time_unit		: "1ns";
	voltage_unit		: "1V";
	current_unit		: "1mA";
	leakage_power_unit	: "1mW";
	nom_process		: 1;
	nom_temperature		: 0.000;
	nom_voltage		: 1.650;
	capacitive_load_unit	 (1,pf);

	pulling_resistance_unit	        : "1kohm";

	/* additional header data */
	default_cell_leakage_power      : 0;
	default_fanout_load		: 1;
	default_inout_pin_cap		: 0.005;
	default_input_pin_cap		: 0.005;
	default_output_pin_cap		: 0.0;
	default_max_transition		: 1.500;

        /* default attributes */
        default_leakage_power_density : 0.0;
        slew_derate_from_library      : 1.000;
        slew_lower_threshold_pct_fall : 10.000;
        slew_upper_threshold_pct_fall : 90.000;
        slew_lower_threshold_pct_rise : 10.000;
        slew_upper_threshold_pct_rise : 90.000;
        input_threshold_pct_fall      : 50.000;
        input_threshold_pct_rise      : 50.000;
        output_threshold_pct_fall     : 50.000;
        output_threshold_pct_rise     : 50.000;

 	/* k-factors */
 	k_process_cell_fall             : 1;
 	k_process_cell_leakage_power    : 0;
 	k_process_cell_rise             : 1;
 	k_process_fall_transition       : 1;
 	k_process_hold_fall             : 1;
 	k_process_hold_rise             : 1;
 	k_process_internal_power        : 0;
 	k_process_min_pulse_width_high  : 1;
 	k_process_min_pulse_width_low   : 1;
 	k_process_pin_cap               : 0;
 	k_process_recovery_fall         : 1;
 	k_process_recovery_rise         : 1;
 	k_process_rise_transition       : 1;
 	k_process_setup_fall            : 1;
 	k_process_setup_rise            : 1;
 	k_process_wire_cap              : 0;
 	k_process_wire_res              : 0;
	k_temp_cell_fall		: 0.000;
	k_temp_cell_rise		: 0.000;
	k_temp_hold_fall                : 0.000;
	k_temp_hold_rise                : 0.000;
	k_temp_min_pulse_width_high     : 0.000;
	k_temp_min_pulse_width_low      : 0.000;
	k_temp_min_period               : 0.000;
	k_temp_rise_propagation         : 0.000;
	k_temp_fall_propagation         : 0.000;
	k_temp_rise_transition          : 0.0;
	k_temp_fall_transition          : 0.0;
	k_temp_recovery_fall            : 0.000;
	k_temp_recovery_rise            : 0.000;
	k_temp_setup_fall               : 0.000;
	k_temp_setup_rise               : 0.000;
	k_volt_cell_fall                : 0.000;
	k_volt_cell_rise                : 0.000;
	k_volt_hold_fall                : 0.000;
	k_volt_hold_rise                : 0.000;
	k_volt_min_pulse_width_high     : 0.000;
	k_volt_min_pulse_width_low      : 0.000;
	k_volt_min_period               : 0.000;
	k_volt_rise_propagation         : 0.000;
	k_volt_fall_propagation         : 0.000;
	k_volt_rise_transition	        : 0.0;
	k_volt_fall_transition	        : 0.0;
	k_volt_recovery_fall            : 0.000;
	k_volt_recovery_rise            : 0.000;
	k_volt_setup_fall               : 0.000;
	k_volt_setup_rise               : 0.000;


        operating_conditions(ff_1p65v_0c) {
		process	 : 1;
		temperature	 : 0.000;
		voltage	 : 1.650;
		tree_type	 : balanced_tree;
	}
        default_operating_conditions : ff_1p65v_0c;
	wire_load("sample") {
		resistance	 : 1.6e-05;
		capacitance	 : 0.0002;
		area	 : 1.7;
  		slope	 : 500;
		fanout_length	 (1,500);
	}
        lu_table_template(sram256w20b_bist_mux_delay_template) {
           variable_1 : input_net_transition;
           variable_2 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        lu_table_template(sram256w20b_mux_mem_out_delay_template) {
           variable_1 : input_net_transition;
           variable_2 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        lu_table_template(sram256w20b_mem_out_delay_template) {
           variable_1 : input_net_transition;
           variable_2 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
	lu_table_template(sram256w20b_bist_mux_slew_template) {
           variable_1 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
	lu_table_template(sram256w20b_mem_out_slew_template) {
           variable_1 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
	lu_table_template(sram256w20b_clk_setup_constraint_template) {
           variable_1 : related_pin_transition;
           variable_2 : constrained_pin_transition;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
	lu_table_template(sram256w20b_constraint_template) {
           variable_1 : related_pin_transition;
           variable_2 : constrained_pin_transition;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        power_lut_template(sram256w20b_energy_template_clkslew_load) {
           variable_1 : input_transition_time;
           variable_2 : total_output_net_capacitance;
               index_1 ("1000, 1001");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        power_lut_template(sram256w20b_energy_template_sigslew_load) {
           variable_1 : input_transition_time;
           variable_2 : total_output_net_capacitance;
               index_1 ("1000, 1001");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        power_lut_template(sram256w20b_energy_template_load) {
           variable_1 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        power_lut_template(sram256w20b_energy_template_clkslew) {
           variable_1 : input_transition_time;
               index_1 ("1000, 1001");
        }
        power_lut_template(sram256w20b_energy_template_sigslew) {
           variable_1 : input_transition_time;
               index_1 ("1000, 1001");
        }
	library_features(report_delay_calculation);
	type (sram256w20b_DATA) {
		base_type : array ;
		data_type : bit ;
		bit_width : 20;
		bit_from : 19;
		bit_to : 0 ;
		downto : true ;
	}
	type (sram256w20b_UPM) {
		base_type : array ;
		data_type : bit ;
		bit_width : 3;
		bit_from : 2;
		bit_to : 0 ;
		downto : true ;
	}
	type (sram256w20b_ADDRESS) {
		base_type : array ;
		data_type : bit ;
		bit_width : 8;
		bit_from : 7;
		bit_to : 0 ;
		downto : true ;
	}
cell(sram256w20b) {
	area		 : 31681.761;
	dont_use	 : TRUE;
	dont_touch	 : TRUE;
        interface_timing : TRUE;
	memory() {
		type : ram;
		address_width : 8;
		word_width : 20;
	}
        bus(Q)   {
                bus_type : sram256w20b_DATA;
		direction : output;
		max_capacitance : 0.650;
                memory_read() {
			address : A;
		}
                timing() {
                        related_pin :   "CLK" ;
                        timing_type : rising_edge ;
                        timing_sense : non_unate;
                        cell_rise(sram256w20b_mem_out_delay_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.000, 0.020, 0.040, 0.090, 0.220, 0.430, 0.650");
                        values ( \
                          "0.537, 0.545, 0.553, 0.574, 0.628, 0.715, 0.806", \
                          "0.561, 0.569, 0.577, 0.598, 0.652, 0.739, 0.830", \
                          "0.591, 0.599, 0.607, 0.628, 0.682, 0.769, 0.860", \
                          "0.651, 0.659, 0.667, 0.688, 0.742, 0.829, 0.920", \
                          "0.831, 0.839, 0.847, 0.868, 0.922, 1.009, 1.100", \
                          "1.131, 1.139, 1.147, 1.168, 1.222, 1.309, 1.400", \
                          "1.431, 1.439, 1.447, 1.468, 1.522, 1.609, 1.700" \
                        )
                        }
                        rise_transition(sram256w20b_mem_out_slew_template) {
                        index_1 ("0.000, 0.020, 0.040, 0.090, 0.220, 0.430, 0.650");
                        values ("0.018, 0.040, 0.061, 0.114, 0.253, 0.478, 0.713")
                        }
                        cell_fall(sram256w20b_mem_out_delay_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.000, 0.020, 0.040, 0.090, 0.220, 0.430, 0.650");
                        values ( \
                          "0.537, 0.545, 0.553, 0.574, 0.628, 0.715, 0.806", \
                          "0.561, 0.569, 0.577, 0.598, 0.652, 0.739, 0.830", \
                          "0.591, 0.599, 0.607, 0.628, 0.682, 0.769, 0.860", \
                          "0.651, 0.659, 0.667, 0.688, 0.742, 0.829, 0.920", \
                          "0.831, 0.839, 0.847, 0.868, 0.922, 1.009, 1.100", \
                          "1.131, 1.139, 1.147, 1.168, 1.222, 1.309, 1.400", \
                          "1.431, 1.439, 1.447, 1.468, 1.522, 1.609, 1.700" \
                        )
                        }
                        fall_transition(sram256w20b_mem_out_slew_template) {
                        index_1 ("0.000, 0.020, 0.040, 0.090, 0.220, 0.430, 0.650");
                        values ("0.019, 0.043, 0.066, 0.124, 0.275, 0.519, 0.774")
                        }
                }
        }
        pin(CLK)   {
		direction : input;
		capacitance : 0.055;
                clock : true;
                max_transition : 1.500;
                min_pulse_width_high : 0.140 ;
                min_pulse_width_low  : 0.145 ;
                min_period           : 1.287 ;


                internal_power(){
                        when : "(!CEN & ! \
                                 (WEN) \
                                ) \
                                 ";
                        rise_power(sram256w20b_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("31.006, 31.006")
                        }
                        fall_power(sram256w20b_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.000, 0.000")
                        }
                }
                internal_power(){
                        when : "(!CEN & \
                                 (WEN) \
                                ) \
                                 ";
                        rise_power(sram256w20b_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("27.738, 27.738")
                        }
                        fall_power(sram256w20b_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.000, 0.000")
                        }
                }
         internal_power(){
                 when : "(CEN)";
                        rise_power(sram256w20b_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.118, 0.118")
                        }
                        fall_power(sram256w20b_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.000, 0.000")
                        }
                }
        }

        pin(CEN)   {
                direction : input;
                capacitance : 0.006;
                timing() {
                        related_pin     : CLK;
                        timing_type     : setup_rising ;
                        rise_constraint(sram256w20b_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.172, 0.193, 0.220, 0.274, 0.435, 0.703, 0.972", \
                          "0.148, 0.169, 0.196, 0.250, 0.411, 0.679, 0.948", \
                          "0.118, 0.139, 0.166, 0.220, 0.381, 0.649, 0.918", \
                          "0.058, 0.079, 0.106, 0.160, 0.321, 0.589, 0.858", \
                          "-0.122, -0.101, -0.074, -0.020, 0.141, 0.409, 0.678", \
                          "-0.422, -0.401, -0.374, -0.320, -0.159, 0.109, 0.378", \
                          "-0.722, -0.701, -0.674, -0.620, -0.459, -0.191, 0.078" \
                        )
                        }
                        fall_constraint(sram256w20b_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.156, 0.180, 0.210, 0.271, 0.453, 0.756, 1.059", \
                          "0.132, 0.156, 0.186, 0.247, 0.429, 0.732, 1.035", \
                          "0.102, 0.126, 0.156, 0.217, 0.399, 0.702, 1.005", \
                          "0.042, 0.066, 0.096, 0.157, 0.339, 0.642, 0.945", \
                          "-0.138, -0.114, -0.084, -0.023, 0.159, 0.462, 0.765", \
                          "-0.438, -0.414, -0.384, -0.323, -0.141, 0.162, 0.465", \
                          "-0.738, -0.714, -0.684, -0.623, -0.441, -0.138, 0.165" \
                        )
                        }
                } 
                timing() {
                        related_pin     : CLK;
                        timing_type     : hold_rising ;
                        rise_constraint(sram256w20b_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.011, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.191, 0.169, 0.142, 0.089, 0.000, 0.000, 0.000", \
                          "0.491, 0.469, 0.442, 0.389, 0.228, 0.000, 0.000", \
                          "0.791, 0.769, 0.742, 0.689, 0.528, 0.259, 0.000" \
                        )
                        }
                        fall_constraint(sram256w20b_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.010, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.190, 0.165, 0.135, 0.074, 0.000, 0.000, 0.000", \
                          "0.490, 0.465, 0.435, 0.374, 0.193, 0.000, 0.000", \
                          "0.790, 0.765, 0.735, 0.674, 0.493, 0.190, 0.000" \
                        )
                        }
               }
        }
        pin(WEN){
                direction : input;
                capacitance : 0.018;
                timing() {
                        related_pin     : CLK;
                        timing_type     : setup_rising ;
                        rise_constraint(sram256w20b_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.157, 0.182, 0.213, 0.275, 0.460, 0.769, 1.077", \
                          "0.133, 0.158, 0.189, 0.251, 0.436, 0.745, 1.053", \
                          "0.103, 0.128, 0.159, 0.221, 0.406, 0.715, 1.023", \
                          "0.043, 0.068, 0.099, 0.161, 0.346, 0.655, 0.963", \
                          "-0.137, -0.112, -0.081, -0.019, 0.166, 0.475, 0.783", \
                          "-0.437, -0.412, -0.381, -0.319, -0.134, 0.175, 0.483", \
                          "-0.737, -0.712, -0.681, -0.619, -0.434, -0.125, 0.183" \
                        )
                        }
                        fall_constraint(sram256w20b_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.188, 0.208, 0.233, 0.284, 0.435, 0.688, 0.940", \
                          "0.164, 0.184, 0.209, 0.260, 0.411, 0.664, 0.916", \
                          "0.134, 0.154, 0.179, 0.230, 0.381, 0.634, 0.886", \
                          "0.074, 0.094, 0.119, 0.170, 0.321, 0.574, 0.826", \
                          "-0.106, -0.086, -0.061, -0.010, 0.141, 0.394, 0.646", \
                          "-0.406, -0.386, -0.361, -0.310, -0.159, 0.094, 0.346", \
                          "-0.706, -0.686, -0.661, -0.610, -0.459, -0.206, 0.046" \
                        )
                        }
                } 
                timing() {
                        related_pin     : CLK;
                        timing_type     : hold_rising ;
                        rise_constraint(sram256w20b_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.008, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.038, 0.013, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.098, 0.073, 0.042, 0.000, 0.000, 0.000, 0.000", \
                          "0.278, 0.253, 0.222, 0.160, 0.000, 0.000, 0.000", \
                          "0.578, 0.553, 0.522, 0.460, 0.275, 0.000, 0.000", \
                          "0.878, 0.853, 0.822, 0.760, 0.575, 0.266, 0.000" \
                        )
                        }
                        fall_constraint(sram256w20b_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.022, 0.002, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.082, 0.062, 0.037, 0.000, 0.000, 0.000, 0.000", \
                          "0.262, 0.242, 0.217, 0.166, 0.015, 0.000, 0.000", \
                          "0.562, 0.542, 0.517, 0.466, 0.315, 0.062, 0.000", \
                          "0.862, 0.842, 0.817, 0.766, 0.615, 0.362, 0.110" \
                        )
                        }
               }
        }
        bus(A)   {
                bus_type : sram256w20b_ADDRESS;
                direction : input;
                capacitance : 0.012;
                timing() {
                        related_pin     : CLK;
                        timing_type     : setup_rising ;
                        rise_constraint(sram256w20b_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.211, 0.238, 0.271, 0.338, 0.538, 0.872, 1.206", \
                          "0.187, 0.214, 0.247, 0.314, 0.514, 0.848, 1.182", \
                          "0.157, 0.184, 0.217, 0.284, 0.484, 0.818, 1.152", \
                          "0.097, 0.124, 0.157, 0.224, 0.424, 0.758, 1.092", \
                          "-0.083, -0.056, -0.023, 0.044, 0.244, 0.578, 0.912", \
                          "-0.383, -0.356, -0.323, -0.256, -0.056, 0.278, 0.612", \
                          "-0.683, -0.656, -0.623, -0.556, -0.356, -0.022, 0.312" \
                        )
                        }
                        fall_constraint(sram256w20b_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.109, 0.133, 0.165, 0.227, 0.413, 0.724, 1.035", \
                          "0.085, 0.109, 0.141, 0.203, 0.389, 0.700, 1.011", \
                          "0.055, 0.079, 0.111, 0.173, 0.359, 0.670, 0.981", \
                          "-0.005, 0.019, 0.051, 0.113, 0.299, 0.610, 0.921", \
                          "-0.185, -0.161, -0.129, -0.067, 0.119, 0.430, 0.741", \
                          "-0.485, -0.461, -0.429, -0.367, -0.181, 0.130, 0.441", \
                          "-0.785, -0.761, -0.730, -0.667, -0.481, -0.170, 0.141" \
                        )
                        }
                } 
                timing() {
                        related_pin     : CLK;
                        timing_type     : hold_rising ;
                        rise_constraint(sram256w20b_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.015, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.045, 0.018, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.105, 0.078, 0.044, 0.000, 0.000, 0.000, 0.000", \
                          "0.285, 0.258, 0.225, 0.158, 0.000, 0.000, 0.000", \
                          "0.585, 0.558, 0.525, 0.458, 0.258, 0.000, 0.000", \
                          "0.885, 0.858, 0.825, 0.758, 0.558, 0.224, 0.000" \
                        )
                        }
                        fall_constraint(sram256w20b_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.006, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.030, 0.005, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.060, 0.035, 0.004, 0.000, 0.000, 0.000, 0.000", \
                          "0.120, 0.095, 0.064, 0.002, 0.000, 0.000, 0.000", \
                          "0.300, 0.275, 0.244, 0.182, 0.000, 0.000, 0.000", \
                          "0.600, 0.575, 0.544, 0.482, 0.295, 0.000, 0.000", \
                          "0.900, 0.875, 0.844, 0.782, 0.595, 0.285, 0.000" \
                        )
                        }
               }
                internal_power(){
                        when : "CEN";
                        rise_power(sram256w20b_energy_template_sigslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.258, 0.258")
                        }
                        fall_power(sram256w20b_energy_template_sigslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.258, 0.258")
                        }
                }
        }
        bus(D)   {
                bus_type : sram256w20b_DATA;
                memory_write() {
                        address : A;
                        clocked_on : "CLK";
                }
                direction : input;
                capacitance : 0.003;
                timing() {
                        related_pin     : CLK;
                        timing_type     : setup_rising ;
                        rise_constraint(sram256w20b_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.059, 0.082, 0.111, 0.169, 0.343, 0.632, 0.922", \
                          "0.035, 0.058, 0.087, 0.145, 0.319, 0.608, 0.898", \
                          "0.005, 0.028, 0.057, 0.115, 0.289, 0.578, 0.868", \
                          "-0.055, -0.032, -0.003, 0.055, 0.229, 0.518, 0.808", \
                          "-0.235, -0.212, -0.183, -0.125, 0.049, 0.338, 0.628", \
                          "-0.535, -0.512, -0.483, -0.425, -0.251, 0.038, 0.328", \
                          "-0.835, -0.812, -0.783, -0.725, -0.551, -0.262, 0.028" \
                        )
                        }
                        fall_constraint(sram256w20b_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.088, 0.112, 0.141, 0.199, 0.374, 0.665, 0.956", \
                          "0.064, 0.088, 0.117, 0.175, 0.350, 0.641, 0.932", \
                          "0.034, 0.058, 0.087, 0.145, 0.320, 0.611, 0.902", \
                          "-0.026, -0.002, 0.027, 0.085, 0.260, 0.551, 0.842", \
                          "-0.206, -0.182, -0.153, -0.095, 0.080, 0.371, 0.662", \
                          "-0.506, -0.482, -0.453, -0.395, -0.220, 0.071, 0.362", \
                          "-0.806, -0.782, -0.753, -0.695, -0.520, -0.229, 0.062" \
                        )
                        }
                } 
                timing() {
                        related_pin     : CLK;
                        timing_type     : hold_rising ;
                        rise_constraint(sram256w20b_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.093, 0.070, 0.041, 0.000, 0.000, 0.000, 0.000", \
                          "0.117, 0.094, 0.065, 0.007, 0.000, 0.000, 0.000", \
                          "0.147, 0.124, 0.095, 0.037, 0.000, 0.000, 0.000", \
                          "0.207, 0.184, 0.155, 0.097, 0.000, 0.000, 0.000", \
                          "0.387, 0.364, 0.335, 0.277, 0.103, 0.000, 0.000", \
                          "0.687, 0.664, 0.635, 0.577, 0.403, 0.114, 0.000", \
                          "0.987, 0.964, 0.935, 0.877, 0.703, 0.414, 0.124" \
                        )
                        }
                        fall_constraint(sram256w20b_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.018, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.078, 0.055, 0.025, 0.000, 0.000, 0.000, 0.000", \
                          "0.258, 0.235, 0.205, 0.147, 0.000, 0.000, 0.000", \
                          "0.558, 0.535, 0.505, 0.447, 0.272, 0.000, 0.000", \
                          "0.858, 0.835, 0.805, 0.747, 0.573, 0.281, 0.000" \
                        )
                        }
               }
        }

        cell_leakage_power : 9.24E-4;
}
}
